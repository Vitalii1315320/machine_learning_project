set.seed(20162)
library(knitr)
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(data.table)
library(corrplot)
library(plotly)
intsall.packages("knitr")
install.packages("knitr")
install.packages("knitr")
set.seed(20162)
library(knitr)
library(knitr)
install.packages("xfun")
install.packages("knitr")
set.seed(20162)
library(knitr)
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(data.table)
library(corrplot)
library(plotly)
library(gbm)
install.packages("кдфтп")
install.packages("rlang")
install.packages("rlang")
library(knitr)
install.packages("xfun")
library(knitr)
update.packages(checkBuilt = TRUE, ask = FALSE)
set.seed(20162)
library(knitr)
library(knitr)
detach("package:knitr", unload = TRUE)
library(knitr)
library(rpart)
library(rpart.plot)
library(corrplot)
library(RColorBrewer)
library(knitr)
install.packages(c("rlang", "xfun", "yaml"))
library(knitr)
install.packages("xfun")
install.packages(c("rlang", "yaml"))
set.seed(20162)
library(knitr)
library(lattice)
library(ggplot2)
library(caret)
library(lattice)
library(package = "lattice")
install.packages("lattice")
install.packages("lattice")
set.seed(20162)
library(knitr)
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(data.table)
library(corrplot)
install.packages("corrplot")
install.packages("corrplot")
library(corrplot)
library(plotly)
library(gbm)
trainData <- read.csv("data/pml-training.csv")
verificationData <- read.csv("data/pml-testing.csv")
dim(trainData)
inTrain <- createDataPartition(trainData$classe, p=0.7, list = FALSE)
library(caret)
inTrain <- createDataPartition(trainData$classe, p=0.7, list = FALSE)
trainSet <- trainData[inTrain, ]
testSet <- trainData[-inTrain, ]
nzValues <- nearZeroVar(trainSet)
trainSet <- trainSet[ , -nzValues]
testSet  <- testSet [ , -nzValues]
naValue <- sapply(trainSet, function(x) mean(is.na(x))) > 0.95
trainSet <- trainSet[ , naValue == FALSE]
testSet  <- testSet [ , naValue == FALSE]
#Since columns 1 to 5, it are identificators
trainSet <- trainSet[ , -(1:5)]
testSet  <- testSet [ , -(1:5)]
classeIndex <- 54
names(trainSet)[classeIndex]
corrMatrix <- cor(trainSet[ , -classeIndex])
corrplot(corrMatrix, order = "FPC", method = "circle", type = "lower",
tl.cex = 0.6, tl.col = rgb(0, 0, 0))
# Decision Tree
set.seed(20162)
fitModelDT <- rpart(classe~., data=trainSet, method="class")
predictDT <- predict(fitModelDT, newdata=testSet, type="class")
library(knitr)
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(data.table)
library(corrplot)
library(plotly)
library(gbm)
set.seed(20162)
library(knitr)
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(data.table)
library(corrplot)
library(plotly)
library(gbm)
trainData <- read.csv("data/pml-training.csv")
verificationData <- read.csv("data/pml-testing.csv")
dim(trainData)
inTrain <- createDataPartition(trainData$classe, p=0.7, list = FALSE)
trainSet <- trainData[inTrain, ]
testSet <- trainData[-inTrain, ]
nzValues <- nearZeroVar(trainSet)
trainSet <- trainSet[ , -nzValues]
testSet  <- testSet [ , -nzValues]
naValue <- sapply(trainSet, function(x) mean(is.na(x))) > 0.95
trainSet <- trainSet[ , naValue == FALSE]
testSet  <- testSet [ , naValue == FALSE]
#Since columns 1 to 5, it are identificators
trainSet <- trainSet[ , -(1:5)]
testSet  <- testSet [ , -(1:5)]
classeIndex <- 54
names(trainSet)[classeIndex]
corrMatrix <- cor(trainSet[ , -classeIndex])
corrplot(corrMatrix, order = "FPC", method = "circle", type = "lower",
tl.cex = 0.6, tl.col = rgb(0, 0, 0))
set.seed(20162)
fitModelDT <- rpart(classe~., data=trainSet, method="class")
predictDT <- predict(fitModelDT, newdata=testSet, type="class")
confMatrixDT <- confusionMatrix(table(predictDT, testSet$classe))
confMatrixDT
set.seed(20162)
ctrlGBM <- trainControl(method = "repeatedcv", number = 5, repeats = 2)
fitModelGBM <- train(classe~., data=trainSet, method="gbm", trControl=ctrlGBM, verbose=FALSE)
fitModelGBM$finalModel
predictGBM <- predict(fitModelGBM, newdata=testSet)
confMatrixGBM <- confusionMatrix(table(predictGBM, testSet$classe))
confMatrixGBM
set.seed(20162)
ctrlRF <- trainControl(method = "repeatedcv", number = 5, repeats = 2)
fitModelRF <- train(classe~., data=trainSet, method="rf", trControl=ctrlRF, verbose=FALSE)
fitModelRF$finalModel
predictRF <- predict(fitModelRF, newdata=testSet)
confMatrixRF <- confusionMatrix(table(predictRF, testSet$classe))
confMatrixRF
cat("Predictions: ", paste(predict(fitModelRF, verificationData)))
set.seed(20162)
library(knitr)
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(data.table)
library(corrplot)
library(plotly)
library(gbm)
train_data <- read.csv("data/pml-training.csv")
set.seed(20162)
library(knitr)
set.seed(20162)
library(knitr)
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(rpart.plot)
library(corrplot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(data.table)
library(corrplot)
library(plotly)
library(gbm)
train_data <- read.csv("data/pml-training.csv")
test_data <- read.csv("data/pml-testing.csv")
dim(train_data)
inTrain <- createDataPartition(train_data$classe, p=0.7, list = FALSE)
trainSet <- train_data[inTrain, ]
testSet <- train_data[-inTrain, ]
nzValues <- nearZeroVar(trainSet)
trainSet <- trainSet[ , -nzValues]
testSet  <- testSet [ , -nzValues]
naValue <- sapply(trainSet, function(x) mean(is.na(x))) > 0.95
trainSet <- trainSet[ , naValue == FALSE]
testSet  <- testSet [ , naValue == FALSE]
#Since columns 1 to 5, it are identificators
trainSet <- trainSet[ , -(1:5)]
